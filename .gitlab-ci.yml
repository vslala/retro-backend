stages:
  - build
  - package
  - deploy

variables:
  REGISTRY_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

build:
  image: gradle:jdk11
  stage: build
  only:
    - master
  script:
    - echo "Building the app"
    - echo $CREDENTIAL_FILE | base64 -d  > $CREDENTIAL_FILE_NAME
    - gradle --build-cache bootjar -x test
  artifacts:
    paths:
      - build
      - .gradle


docker-build:
  image: docker:latest
  services:
    - docker:dind
  stage: package
  only:
    - master
  script:
    - docker build -t $REGISTRY_IMAGE .
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker push $REGISTRY_IMAGE

deploy:
  image: alpine:latest
  stage: deploy
  script:
    - echo "Alpine image created!"
    - apk update && apk add openssh-server openssh-client
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SERVER_KEY" | tr -d '\r' | ssh-add -
    - echo "$SERVER_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - alias run="ssh -i ~/.ssh/id_rsa -o \"StrictHostKeyChecking no\" ${SERVER_USERNAME}@${SERVER_IP}"
    - run 'echo SSH Successful! -> Home Directory=$HOME'
    - run 'sudo docker container stop retro-board-backend || true'
    - run 'sudo docker rm retro-board-backend || true'
    - run 'sudo docker system prune -f'
    - run 'sudo docker images | grep "registry.gitlab.com" | xargs sudo docker rmi || true'
    - run "sudo docker login -u gitlab+deploy-token-177721 -p ${DEPLOY_TOKEN} registry.gitlab.com"
    - run "sudo docker pull ${REGISTRY_IMAGE}"
    - run "sudo sh deploy.sh ${MYSQL_CONTAINER_NAME} ${CI_REGISTRY_IMAGE} ${CI_COMMIT_SHA} ${MYSQL_ROOT_PASSWORD} ${MYSQL_USER} ${MYSQL_PASS} ${MYSQL_PORT} ${CREDENTIAL_FILE_NAME} ${SPRING_ACTIVE_PROFILE}"
